<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>Описание класса шаблонизатора</title>
<link rel="stylesheet" href="man_styles.css" type="text/css">
</head>

<body>
<h1>Описание класса шаблонизатора</h1>

<p>Шаблонизатор написан на PHP и реализован в виде класса с именем <i>template</i>. Доступные методы и свойства приведены в таблице ниже.
<p>Описание языка разметки для данного шаблонизатора представлено <a href=markup.htm>здесь</a>.

<table border=1 width=95% align=center>
<caption><h2>На данный момент определены следующие методы:</h2></caption>
	<tr>
		<th><a name=templateConstructor>Собственно Конструктор</a>
			<br>void template() или
			<br>void template(string файл_шаблона)</th>
		<td>Первая форма просто создает екземпляр класса шабона. Вторая сразу связывает его с конкретным файлом шаблона. Сделать это можно и позднее методом <a href=>load_file</a> или <a href=#>string_template</a>
	<tr>
		<th><a name=templateFind_path>string find_path(string файл, string subdir='')</a>
		<td>Осуществляет поиск запрошенного файла для большинства функций. Если указан <i>subdir</i> он везде подставляется как субдиректориия последнейго уровня вложенности (например 'modules/'). Порядок поиска следующий:
			<br>Если удалось по указанному пути найти файл, то он просто сразу возвращается. Если нет, то ищется он же в директории TEMPLATE_TEMPLATES_DIR. Если и там не удалось найти, смотрится в той же директории, где лежит и класс шаблонизатора.
			<br>В случае если запрошенный файл найден, возвращается полный его путь для манипулирования дальнейшего. Также, если путь изменился, относительно начального запрошенного, генерируется <i>NOTICE</i>.
			<br>В случае неудачного поиска, возвращается false. ОШИБКИ <b>НЕ</b> генерируется!
	<tr>
		<th>void load_file(string файл_шаблона)
		<td>Читает и связывает класс с конкретным файлом шаблона который нужно будет разобрать. Файл может быть с любым расширением (предпочтительно .tmpl) и содержал в себе <a href=markup.htm>соответствующую разметку</a>. Располагаться шаблон может в любом месте, главное чтобы были права на его чтение скрипту из которого подключен класс шаблонов. Указывать можно как абсолютный так и относительный путь<sup>1</sup>.
		<br>Если указанный файл прочитать не удалось генерирует сообщение об ошибке (ERROR)
	<tr>
		<th>void string_template(string data)
		<td>Загружает содержимое для разбора из строковой переменной <i>data</i>. Иногда это удобнее чем просто указывать файл, например при хранении шаблонов в БД. Никаких проверок содержимого не производится<sup>2</sup>.
	<tr>
		<th><a name=templateAssign>void assign(string var_name, mixed var_value [, file])</a>
		<td>Связывает имена переменных <i>var_name</i> и их значения <i>var_value</i> для переменных используемых в шаблоне. Переменные могут быть любого допустимого в PHP типа<sup>3</sup>. Необязательная переменная <i>file</i> указывает к какому имени файла (если подключаются вложения в самом шаблоне) относится данная переменная, дабы избежать пересечения имен. Если не указано то переменная связывается в глобальную область видимости и будет доступна как из основного шаблона так и из вложений.
	<tr>
		<th colspan=2 class=center><hr>Следующие 2 метода, самые основные "Рабочие лошадки"
	<tr>
		<th><a name=parse>void parse([bool printout=true])</a>
		<td>Собственно разбирает шаблон. Результат разбора доступен в свойстве <a href=#>content_file</a>. Необязательный параметр <i>printout</i> указывает нужно ли вывести сразу после разбора результат на стандартный вывод. Поумолчанию выводит, это на самом деле означает что вызывается метод <a href=#>printout</a> сразу после разбора.
	<tr>
		<th><a name=parse>void scheme([bool printout=true],
			<br>[string scheme = <a href=template_constants.htm#TEMPLATE_DEFAULT_SCHEME>TEMPLATE_DEFAULT_SCHEME</a>])</a>
		<td>Формирует вывод соответственно заданной <i>схеме</i>.
			<p><i>схема</i>, это практически тот же шаблон, кроме одного единственного тега: <xmp><!--<<scheme_name>>--></xmp>Файл схемы должен называться scheme_name.scheme
			<p>Обработка происходит следующим образом: Сначала парсится полностью шаблон, методом <i>parse</i> (см выше), потом парсится указанный файл схемы как шаблон обычный. И после этого, вышеуказанный тег, заменяется на результат обработки шаблона.
			<p>Таким образом, данное удобнее всего использовать для унификации всего интерфейса, и единой структуры компоновки содержания.
	<tr>
		<th><a name=parse>void message(string message, [bool printout=true],
			<br>[string scheme = <a href=template_constants.htm#TEMPLATE_DEFAULT_SCHEME>TEMPLATE_DEFAULT_SCHEME</a>])</a>
		<td>Очень похожа на метод sheme выше, но сделана для удобства: Автоматически выполняет <a href=templateAssign>assign</a> переменной <i>MESSAGE</i> на значение переменной <i>message</i>. Ну и парсинг и вывод шаблона, указанного в <a href=template_constants.htm#templateConstantMessage>TEMPLATE_MESSAGE</a> с указанной или поумолчанию схемой.
	<tr>
		<th colspan=2><hr>
	<tr>
		<th>void replace(string what, string to)
		<td>Имеет алиас result (чаще для внутренних целей)
			<p>Для выполнения локальных замен без долгой обработки шаблона. Удобно, например для быстрого внесения изменений в кучу одинаковых файлов.
	<tr>
		<th>RTESafe
		<td>??? Возможно будет удалено позже, поэтому пока без описания, кому интересно смотрите исходник.
	<tr>
		<th>string RTEShortHTML(string data)
		<td>"Укорачивает" получаемый от <a href=markup.htm#wysiwyg>WYSYIWYG-редактора</a> HTML-текст (<i>data</i>) для дальнейшего использования. Рекомендуется вызывать перед сохранением его куда-либо. Вид документа (не код разметки!) в 99% случаев остается неизменным.
</table>

<table border=1 width=95% align=center>
<caption><h2>На данный момент определены следующие свойства:</h2></caption>
	<tr>
		<th width=1>string content_file
		<td>До вызова метода <a href=#parse>parse</a> содержит текст самого шаблона (из файла или строки), после - рузульат обработки шаблона.
	<tr>
		<td colspan=2><hr>
	<tr>
		<th>array assigned
		<td>Содержит массив определенных для шаблонов переменных<sup>4</sup>.
	<tr>
		<td colspan=2><hr>
	<tr>
		<th>string filename
		<td>Содержит имя файла шаблона связанного с экземпляром класса.
	<tr>
		<td colspan=2><hr>
	<tr>
		<th>array error
		<td>Массив произошедших ошибок с полным описанием. Ошибки подразделяются: на ERROR<sup>5</sup> - критические, WARNING и NOTICE по уровню важности.
	<tr>
		<td colspan=2><hr>
	<tr>
		<th>bool wysiwyg_full = false
		<td>Если установлено в <i>true</i> то на странице, содержащей несколько WYSIWYG-редакторов для каждого используется почти полная инициализация. Тоесть он указывает что разные окна редакторов относятся к разным формам. Поумолчанию <i>false</i>
	<tr>
		<td colspan=2><hr>
	<tr>
		<th>string (секунды) gentime
		<td>Время генерации шаблона.
</table>

<table>
<!--Сноски и комментарии -->
	<tr>
		<td colspan=2><hr><hr>
	<tr>
		<td colspan=2><sup>1</sup> - Внимание. Если скрипт из которого подключается класс шаблонов и файл с классом лежат в разных директориях, то относительный путь указывается относительно скрипта в котором происходит включение.
	<tr>
		<td colspan=2><sup>2</sup> - Такие шаблоны парсятся только как шаблоны, и не могут быть PHP-кодом. (Возможно это будет реализовано в следующих версиях.)
	<tr>
		<td colspan=2><sup>3</sup> - Пока очень неполно реализована поддержка объектов.
	<tr>
		<td colspan=2><sup>4</sup> - Внимание. Константы не представлены в этом массиве, но могут использоваться для подставления значений.
	<tr>
		<td colspan=2><sup>5</sup> - При ошибке типа ERROR, тоесть критической, проиходит остановка полностью всего и выводится о ней сообщение.
</table>
</body>
</html>